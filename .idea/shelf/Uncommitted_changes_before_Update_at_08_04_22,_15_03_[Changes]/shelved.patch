Index: src/main/java/com/twitchsnitch/importer/service/PersistenceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.twitchsnitch.importer.service;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\nimport com.twitchsnitch.importer.dto.sully.channels.*;\nimport com.twitchsnitch.importer.dto.sully.games.GamesDatum;\nimport com.twitchsnitch.importer.dto.sully.games.GamesTable;\nimport com.twitchsnitch.importer.dto.sully.teams.TeamsDatum;\nimport com.twitchsnitch.importer.dto.sully.teams.TeamsTable;\nimport com.twitchsnitch.importer.dto.twitch.GameDTO;\nimport com.twitchsnitch.importer.dto.twitch.GameListDTO;\nimport com.twitchsnitch.importer.dto.twitch.StreamTagDTO;\nimport com.twitchsnitch.importer.dto.twitch.StreamTagListDTO;\nimport org.neo4j.driver.AuthTokens;\nimport org.neo4j.driver.Driver;\nimport org.neo4j.driver.GraphDatabase;\nimport org.neo4j.driver.summary.ResultSummary;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.data.neo4j.core.Neo4jClient;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.StopWatch;\n\nimport javax.annotation.PostConstruct;\nimport java.util.*;\n\n@Service\npublic class PersistenceService {\n\n    private Neo4jClient client;\n\n    private final static Logger log = LoggerFactory.getLogger(PersistenceService.class);\n\n    @PostConstruct\n    public void initNeo4j() {\n        Driver driver = GraphDatabase\n                .driver(\"neo4j://165.232.187.113:7687\", AuthTokens.basic(\"neo4j\", \"traidable\"));\n        client = Neo4jClient.create(driver);\n    }\n\n    public final ObjectMapper objectMapper() {\n        JavaTimeModule module = new JavaTimeModule();\n        return new ObjectMapper()\n                .setSerializationInclusion(JsonInclude.Include.NON_NULL)\n                .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\n                .registerModule(module);\n    }\n\n    public void deleteDBData() {\n        ResultSummary run = client.query(\"MATCH (n) DETACH DELETE n\").run();\n        log.debug(\"Nodes deleted from the DB: \" + run.counters().nodesDeleted());\n    }\n\n    public void runDBConstraints() {\n\n        //TODO run some sort of check to see if these constraints exist before trying to add new ones\n        //GAMES\n        //ResultSummary gameNameConstraint = client.query(\"CREATE CONSTRAINT FOR (g:Game) REQUIRE g.name IS UNIQUE;\").run();\n        //can only have one uniqueness constraint per label?\n//        ResultSummary gameTwitchIdConstraint = client.query(\"CREATE CONSTRAINT FOR (g:Game) REQUIRE g.twitch_id IS UNIQUE;\").run();\n//        ResultSummary gameSullyIdConstraint = client.query(\"CREATE CONSTRAINT FOR (g:Game) REQUIRE g.sully_id IS UNIQUE;\").run();\n//        client.query(\"CREATE CONSTRAINT FOR (g:GameSummary) REQUIRE g.days IS UNIQUE;\").run();\n//        client.query(\"CREATE CONSTRAINT FOR (g:GamePerspective) REQUIRE g.days IS UNIQUE;\").run();\n\n        //LANGUAGE\n        ResultSummary languageConstraint = client.query(\"CREATE CONSTRAINT FOR (l:Language) REQUIRE l.name IS UNIQUE;\").run();\n\n\n        //STREAM TAGS\n        ResultSummary gameNameConstraint = client.query(\"CREATE CONSTRAINT FOR (s:StreamTag) REQUIRE s.twitch_id IS UNIQUE;\").run();\n        //Channels\n\n        //Teams\n\n        //Users\n\n\n//        CREATE CONSTRAINT ON (s:Stream) ASSERT s.name IS UNIQUE;\n//        CREATE CONSTRAINT ON (u:User) ASSERT u.name IS UNIQUE;\n//        CREATE CONSTRAINT ON (g:Game) ASSERT g.name IS UNIQUE;\n//        CREATE CONSTRAINT ON (l:Language) ASSERT l.name IS UNIQUE;\n//        CREATE CONSTRAINT ON (t:Team) ASSERT t.id IS UNIQUE;\n\n\n    }\n\n    private void logResultSummaries(ResultSummary resultSummary) {\n        log.debug(\"Nodes created: \" + resultSummary.counters().nodesCreated());\n        log.debug(\"Labels added: \" + resultSummary.counters().labelsAdded());\n        log.debug(\"Properties set: \" + resultSummary.counters().propertiesSet());\n    }\n\n    public Set<String> getAllGamesWithoutTwitchIds() {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        Set<String> gamesWithoutTwitchIds = new HashSet<>();\n        Collection<Map<String, Object>> all = client.query(\"MATCH (g:Game) WHERE g.twitch_id IS NULL SET g.twitch_id = false RETURN g.name LIMIT 100\").fetch().all();\n        for (Map<String, Object> objectMap : all) {\n            for (Map.Entry<String, Object> entry : objectMap.entrySet()) {\n                gamesWithoutTwitchIds.add((String) entry.getValue());\n            }\n        }\n        stopWatch.stop();\n        log.debug(\"Get All Games Without TwitchIds took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n        return gamesWithoutTwitchIds;\n    }\n\n    public Set<String> getAllChannelsWithoutTwitchIds() {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        Set<String> channelsWithoutTwitchIds = new HashSet<>();\n        Collection<Map<String, Object>> all = client.query(\"MATCH (c:Channel) WHERE c.twitch_id IS NULL RETURN c.name\").fetch().all();\n        for (Map<String, Object> objectMap : all) {\n            log.debug(objectMap.toString());\n        }\n        stopWatch.stop();\n        log.debug(\"Get All Channels Without TwitchIds took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n        return channelsWithoutTwitchIds;\n    }\n\n    public Set<String> getAllTeamsWithoutTwitchIds() {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        Set<String> teamsWithoutTwitchIds = new HashSet<>();\n        Collection<Map<String, Object>> all = client.query(\"MATCH (t:Team) WHERE t.twitch_id IS NULL RETURN t.name\").fetch().all();\n        for (Map<String, Object> objectMap : all) {\n            log.debug(objectMap.toString());\n        }\n        stopWatch.stop();\n        log.debug(\"Get All Teams Without TwitchIds took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n        return teamsWithoutTwitchIds;\n    }\n\n    @Async\n    public void persistSullyGameSummaries(Set<GamesTable> gamesTableSet) {\n        for (GamesTable table : gamesTableSet) {\n            ResultSummary run = client.query(\"MERGE (g:GameSummary\" + table.getDays() + \"Days{day_range:$dayRange})\\n\" +\n                            \"            SET     g.records_total = $recordsTotal,\\n\" +\n                            \"                    g.view_minutes = $viewminutes,\\n\" +\n                            \"                    g.streamed_minutes = $streamedminutes,\\n\" +\n                            \"                    g.max_channels = $maxchannels,\\n\" +\n                            \"                    g.unique_channels = $uniquechannels,\\n\" +\n                            \"                    g.avg_channels = $avgchannels,\\n\" +\n                            \"                    g.max_viewers = $maxviewers,\\n\" +\n                            \"                    g.avg_viewers = $avgviewers,\\n\" +\n                            \"                    g.avg_ratio = $avgratio,\\n\" +\n                            \"                    g.change_unique_channels = $changeuniquechannels,\\n\" +\n                            \"                    g.change_viewer_minutes = $changeviewerminutes,\\n\" +\n                            \"                    g.change_streamed_minutes = $changestreamedminutes,\\n\" +\n                            \"                    g.change_average_viewers = $changeaverageviewers,\\n\" +\n                            \"                    g.change_min_viewers = $changeminviewers,\\n\" +\n                            \"                    g.change_max_viewers = $changemaxviewers,\\n\" +\n                            \"                    g.change_average_channels = $changeaveragechannels,\\n\" +\n                            \"                    g.change_min_channels = $changeminchannels,\\n\" +\n                            \"                    g.change_max_channels = $changemaxchannels,\\n\" +\n                            \"                    g.change_average_ratio = $changeaverageratio,\\n\" +\n                            \"                    g.views_gained = $viewsgained,\\n\" +\n                            \"                    g.followers_gained = $followersgained,\\n\" +\n                            \"                    g.vphs = $vphs,\\n\" +\n                            \"                    g.fphs = $fphs;\")\n                    .bind(table.getDays()).to(\"dayRange\")\n                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n                    .bind(table.getProgressMap().get(\"viewminutes\")).to(\"viewminutes\")\n                    .bind(table.getProgressMap().get(\"streamedminutes\")).to(\"streamedminutes\")\n                    .bind(table.getProgressMap().get(\"maxchannels\")).to(\"maxchannels\")\n                    .bind(table.getProgressMap().get(\"uniquechannels\")).to(\"uniquechannels\")\n                    .bind(table.getProgressMap().get(\"avgchannels\")).to(\"avgchannels\")\n                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n                    .bind(table.getProgressMap().get(\"avgratio\")).to(\"avgratio\")\n                    .bind(table.getProgressMap().get(\"changeuniquechannels\")).to(\"changeuniquechannels\")\n                    .bind(table.getProgressMap().get(\"changeviewerminutes\")).to(\"changeviewerminutes\")\n                    .bind(table.getProgressMap().get(\"changestreamedminutes\")).to(\"changestreamedminutes\")\n                    .bind(table.getProgressMap().get(\"changeaverageviewers\")).to(\"changeaverageviewers\")\n                    .bind(table.getProgressMap().get(\"changeminviewers\")).to(\"changeminviewers\")\n                    .bind(table.getProgressMap().get(\"changemaxviewers\")).to(\"changemaxviewers\")\n                    .bind(table.getProgressMap().get(\"changeaveragechannels\")).to(\"changeaveragechannels\")\n                    .bind(table.getProgressMap().get(\"changeminchannels\")).to(\"changeminchannels\")\n                    .bind(table.getProgressMap().get(\"changemaxchannels\")).to(\"changemaxchannels\")\n                    .bind(table.getProgressMap().get(\"changeaverageratio\")).to(\"changeaverageratio\")\n                    .bind(table.getProgressMap().get(\"viewsgained\")).to(\"viewsgained\")\n                    .bind(table.getProgressMap().get(\"followersgained\")).to(\"followersgained\")\n                    .bind(table.getProgressMap().get(\"vphs\")).to(\"vphs\")\n                    .bind(table.getProgressMap().get(\"fphs\")).to(\"fphs\")\n                    .run();\n\n            logResultSummaries(run);\n        }\n    }\n\n    @Async\n    public void persistSullyChannelSummaries(Set<ChannelsTable> channelsTables) {\n        for (ChannelsTable table : channelsTables) {\n            ResultSummary run = client.query(\"MERGE (c:ChannelSummary\" + table.getDays() + \"Days{day_range:$dayRange})\\n\" +\n                            \"            SET     c.records_total = $recordsTotal,\\n\" +\n                            \"                    c.view_minutes = $viewminutes,\\n\" +\n                            \"                    c.max_viewers = $maxviewers,\\n\" +\n                            \"                    c.avg_viewers = $avgviewers,\\n\" +\n                            \"                    c.streamed_minutes = $streamedminutes,\\n\" +\n                            \"                    c.followers = $followers,\\n\" +\n                            \"                    c.followers_gained = $followersgained;\")\n                    .bind(table.getDays()).to(\"dayRange\")\n                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n                    .bind(table.getProgressMap().get(\"viewminutes\")).to(\"viewminutes\")\n                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n                    .bind(table.getProgressMap().get(\"streamedminutes\")).to(\"streamedminutes\")\n                    .bind(table.getProgressMap().get(\"followers\")).to(\"followers\")\n                    .bind(table.getProgressMap().get(\"followersgained\")).to(\"followersgained\")\n                    .run();\n            logResultSummaries(run);\n        }\n    }\n\n    @Async\n    public void persistSullyTeamSummaries(Set<TeamsTable> teamsTables) {\n        for (TeamsTable table : teamsTables) {\n            ResultSummary run = client.query(\"MERGE (t:TeamsSummary\" + table.getDays() + \"Days{day_range:$dayRange})\\n\" +\n                            \"            SET     t.records_total = $recordsTotal,\\n\" +\n                            \"                    t.watch_time = $watchtime,\\n\" +\n                            \"                    t.max_viewers = $maxviewers,\\n\" +\n                            \"                    t.avg_viewers = $avgviewers,\\n\" +\n                            \"                    t.stream_time = $streamtime,\\n\" +\n                            \"                    t.members = $members,\\n\" +\n                            \"                    t.max_channels = $maxchannels,\\n\" +\n                            \"                    t.avg_channels = $avgchannels;\")\n                    .bind(table.getDays()).to(\"dayRange\")\n                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n                    .bind(table.getProgressMap().get(\"watchtime\")).to(\"watchtime\")\n                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n                    .bind(table.getProgressMap().get(\"streamtime\")).to(\"streamtime\")\n                    .bind(table.getProgressMap().get(\"members\")).to(\"members\")\n                    .bind(table.getProgressMap().get(\"maxchannels\")).to(\"maxchannels\")\n                    .bind(table.getProgressMap().get(\"avgchannels\")).to(\"avgchannels\")\n                    .run();\n            logResultSummaries(run);\n        }\n    }\n\n    //    @Async\n//    public void persistSullyChannelPerspective(Map jsonMap) {\n//        StopWatch stopWatch = new StopWatch();\n//        stopWatch.start();\n//        for (ChannelsTable table : allChannels) {\n//            for (ChannelDatum data : table.getData()) {\n//                ResultSummary run = client.query(\"MERGE (c:Channel{sully_id:$id})\\n\" +\n//                                \"            SET     c.view_minutes = $viewminutes,\\n\" +\n//                                \"                    c.streamed_minutes = $streamedminutes,\\n\" +\n//                                \"                    c.max_viewers = $maxviewers,\\n\" +\n//                                \"                    c.avg_viewers = $avgviewers,\\n\" +\n//                                \"                    c.followers = $followers,\\n\" +\n//                                \"                    c.followers_gained = $followersgained,\\n\" +\n//                                \"                    c.views_gained = $viewsgained,\\n\" +\n//                                \"                    c.followers_gained_while_playing = $followersgainedwhileplaying,\\n\" +\n//                                \"                    c.partner = $partner,\\n\" +\n//                                \"                    c.affiliate = $affiliate,\\n\" +\n//                                \"                    c.mature = $mature,\\n\" +\n//                                \"                    c.language = $language,\\n\" +\n//                                \"                    c.status = $status,\\n\" +\n//                                \"                    c.previous_view_minutes = $previousviewminutes,\\n\" +\n//                                \"                    c.previous_streamed_minutes = $previousstreamedminutes,\\n\" +\n//                                \"                    c.previous_max_viewers = $previousmaxviewers,\\n\" +\n//                                \"                    c.previous_avg_viewers = $previousavgviewers,\\n\" +\n//                                \"                    c.previous_follower_gain = $previousfollowergain,\\n\" +\n//                                \"                    c.previous_views_gained = $previousviewsgained,\\n\" +\n//                                \"                    c.logo = $logo,\\n\" +\n//                                \"                    c.twitch_url = $twitchurl,\\n\" +\n//                                \"                    c.url = $url,\\n\" +\n//                                \"                    c.display_name = $displayname\")\n//                        .bind(data.getId()).to(\"id\")\n//                        .bind(data.getViewminutes()).to(\"viewminutes\")\n//                        .bind(data.getStreamedminutes()).to(\"streamedminutes\")\n//                        .bind(data.getMaxviewers()).to(\"maxviewers\")\n//                        .bind(data.getAvgviewers()).to(\"avgviewers\")\n//                        .bind(data.getFollowers()).to(\"followers\")\n//                        .bind(data.getFollowersgained()).to(\"followersgained\")\n//                        .bind(data.getViewsgained()).to(\"viewsgained\")\n//                        .bind(data.getFollowersgainedwhileplaying()).to(\"followersgainedwhileplaying\")\n//                        .bind(data.getPartner()).to(\"partner\")\n//                        .bind(data.getAffiliate()).to(\"affiliate\")\n//                        .bind(data.getMature()).to(\"mature\")\n//                        .bind(data.getLanguage()).to(\"language\")\n//                        .bind(data.getStatus()).to(\"status\")\n//                        .bind(data.getPreviousviewminutes()).to(\"previousviewminutes\")\n//                        .bind(data.getPreviousstreamedminutes()).to(\"previousstreamedminutes\")\n//                        .bind(data.getPreviousmaxviewers()).to(\"previousmaxviewers\")\n//                        .bind(data.getPreviousavgviewers()).to(\"previousavgviewers\")\n//                        .bind(data.getPreviousfollowergain()).to(\"previousfollowergain\")\n//                        .bind(data.getPreviousviewsgained()).to(\"previousviewsgained\")\n//                        .bind(data.getLogo()).to(\"logo\")\n//                        .bind(data.getTwitchurl()).to(\"twitchurl\")\n//                        .bind(data.getUrl()).to(\"url\")\n//                        .bind(data.getDisplayname()).to(\"displayname\")\n//                        .run();\n//                logResultSummaries(run);\n//            }\n//        }\n//        stopWatch.stop();\n//        log.debug(\"Persisting Sully Channels took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n//    }\n//\n    @Async\n    public void persistSullyChannels(Map jsonMap) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        ResultSummary run = client.query(\"UNWIND $json.data as channel\" +\n                        \" MERGE (c:Channel{sully_id:channel.id})\\n\" +\n                        \"          SET       c.followers = channel.followers,\\n\" +\n                        \"                    c.partner = channel.partner,\\n\" +\n                        \"                    c.affiliate = channel.affiliate,\\n\" +\n                        \"                    c.mature = channel.mature,\\n\" +\n                        \"                    c.language = channel.language,\\n\" +\n                        \"                    c.status = channel.status,\\n\" +\n                        \"                    c.logo = channel.logo,\\n\" +\n                        \"                    c.twitch_url = channel.twitchurl,\\n\" +\n                        \"                    c.url = channel.url,\\n\" +\n                        \"                    c.display_name = channel.displayname\" +\n                        \" MERGE (c)-[HAS_LANGUAGE]->(l:Language{name:channel.language)\")\n                .bind(jsonMap).to(\"json\")\n                .run();\n        logResultSummaries(run);\n        stopWatch.stop();\n        log.debug(\"Persisting Sully Channels took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n    }\n\n//    @Async\n//    public void persistSullyTeamsPerspective(Set<TeamsTable> allTeams) {\n//        StopWatch stopWatch = new StopWatch();\n//        stopWatch.start();\n//        for (TeamsTable table : allTeams) {\n//            for (TeamsDatum data : table.getData()) {\n//                ResultSummary run = client.query(\"MERGE (t:Team{sully_id:$id})\\n\" +\n//                                \"            SET     t.stream_time = $streamtime,\\n\" +\n//                                \"                    t.watch_time = $watchtime,\\n\" +\n//                                \"                    t.max_viewers = $maxviewers,\\n\" +\n//                                \"                    t.avg_viewers = $avgviewers,\\n\" +\n//                                \"                    t.members = $members,\\n\" +\n//                                \"                    t.max_channels = $maxchannels,\\n\" +\n//                                \"                    t.avg_channels = $avgchannels,\\n\" +\n//                                \"                    t.name = $name,\\n\" +\n//                                \"                    t.logo = $logo,\\n\" +\n//                                \"                    t.twitch_url = $twitchurl;\")\n//                        .bind(data.getId()).to(\"id\")\n//                        .bind(data.getStreamtime()).to(\"streamtime\")\n//                        .bind(data.getWatchtime()).to(\"watchtime\")\n//                        .bind(data.getMaxviewers()).to(\"maxviewers\")\n//                        .bind(data.getAvgviewers()).to(\"avgviewers\")\n//                        .bind(data.getMembers()).to(\"members\")\n//                        .bind(data.getMaxchannels()).to(\"maxchannels\")\n//                        .bind(data.getAvgchannels()).to(\"avgchannels\")\n//                        .bind(data.getName()).to(\"name\")\n//                        .bind(data.getLogo()).to(\"logo\")\n//                        .bind(data.getTwitchurl()).to(\"twitchurl\")\n//                        .run();\n//                logResultSummaries(run);\n//            }\n//        }\n//        stopWatch.stop();\n//        log.debug(\"Persisting Sully Teams took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n//    }\n\n    @Async\n    public void persistSullyTeams(Map jsonMap) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n                ResultSummary run = client.query(\"UNWIND json.data as team\" +\n                                \"MERGE (t:Team{sully_id:team.id})\\n\" +\n                                \"          SET          t.members = team.members,\\n\" +\n                                \"                    t.name = team.name,\\n\" +\n                                \"                    t.logo = team.logo,\\n\" +\n                                \"                    t.url = team.twitchurl;\")\n                        .bind(jsonMap).to(\"json\")\n                        .run();\n                logResultSummaries(run);\n        stopWatch.stop();\n        log.debug(\"Persisting Sully Teams took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n    }\n\n    @Async\n    public void persistSullyGamesPerspective(Map jsonMap) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n                ResultSummary run = client.query(\"UNWIND $json.data as gp\" +\n                                \"MERGE (g:Game{sully_id:$id})\\n\" +\n                                \"            SET     g.view_minutes = $viewminutes,\\n\" +\n                                \"                    g.streamed_minutes = $streamedminutes,\\n\" +\n                                \"                    g.max_channels = $maxchannels,\\n\" +\n                                \"                    g.unique_channels = $uniquechannels,\\n\" +\n                                \"                    g.avg_channels = $avgchannels,\\n\" +\n                                \"                    g.max_viewers = $maxviewers,\\n\" +\n                                \"                    g.avg_viewers = $avgviewers,\\n\" +\n                                \"                    g.avg_ratio = $avgratio,\\n\" +\n                                \"                    g.views_gained = $viewsgained,\\n\" +\n                                \"                    g.followers_gained = $followersgained,\\n\" +\n                                \"                    g.previous_view_minutes = $previousviewminutes,\\n\" +\n                                \"                    g.previous_streamed_minutes = $previousstreamedminutes,\\n\" +\n                                \"                    g.previous_max_channels = $previousmaxchannels,\\n\" +\n                                \"                    g.previous_unique_channels = $previousuniquechannels,\\n\" +\n                                \"                    g.previous_avg_channels = $previousavgchannels,\\n\" +\n                                \"                    g.previous_max_viewers = $previousmaxviewers,\\n\" +\n                                \"                    g.previous_avg_viewers = $previousavgviewers,\\n\" +\n                                \"                    g.previous_avg_ratio = $previousavgratio,\\n\" +\n                                \"                    g.previous_vphs = $previousvphs,\\n\" +\n                                \"                    g.fphs = $fphs,\\n\" +\n                                \"                    g.vphs = $vphs,\\n\" +);\n                        .bind(jsonMap).to(\"json\")\n                        .run();\n                logResultSummaries(run);\n        stopWatch.stop();\n        log.debug(\"Persisting Sully Games Perspective took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n    }\n\n    @Async\n    public void persistSullyGames(Map jsonMap) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        ResultSummary run = client.query(\"UNWIND $json.data as game\\n\" +\n                        \"MERGE (g:Game{sully_id:game.id})\\n\" +\n                        \"            SET     g.name = game.name,\\n\" +\n                        \"                    g.logo = game.logo,\\n\" +\n                        \"                    g.url = game.url;\")\n                .bind(jsonMap).to(\"json\")\n                .run();\n        logResultSummaries(run);\n\n        stopWatch.stop();\n        log.debug(\"Persisting Sully Games took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n    }\n\n    @Async\n    public void persistSullyChannelStreams(Set<ChannelStream> channelStreams) {\n        //TODO make the relationship parts\n        for (ChannelStream channelStream : channelStreams) {\n            for (ChannelStreamDatum data : channelStream.getData()) {\n                ResultSummary run = client.query(\"MERGE (s:Stream{sully_id:$streamId})\\n\" +\n                                \"            SET     s.start_time = $starttime,\\n\" +\n                                \"                    s.end_time = $endtime,\\n\" +\n                                \"                    s.length = $length,\\n\" +\n                                \"                    s.view_gain = $viewgain,\\n\" +\n                                \"                    s.follower_gain = $followergain,\\n\" +\n                                \"                    s.avg_viewers = $avgviewers,\\n\" +\n                                \"                    s.max_viewers = $maxviewers,\\n\" +\n                                \"                    s.followers_per_hour = $followersperhour,\\n\" +\n                                \"                    s.games_played = $gamesplayed,\\n\" +\n                                \"                    s.views_per_hour = $viewsperhour,\\n\" +\n                                \"                    s.channel_display_name = $channeldisplayname,\\n\" +\n                                \"                    s.channel_logo = $channellogo,\\n\" +\n                                \"                    s.channel_url = $channelurl,\\n\" +\n                                \"                    s.start_date_time = $startDateTime,\\n\" +\n                                \"                    s.stream_url = $streamUrl,\\n\" +\n                                \"                    s.view_minutes = $viewminutes;\")\n                        .bind(data.getStreamId()).to(\"streamId\")\n                        .bind(data.getStarttime()).to(\"starttime\")\n                        .bind(data.getEndtime()).to(\"endtime\")\n                        .bind(data.getLength()).to(\"length\")\n                        .bind(data.getViewgain()).to(\"viewgain\")\n                        .bind(data.getFollowergain()).to(\"followergain\")\n                        .bind(data.getAvgviewers()).to(\"avgviewers\")\n                        .bind(data.getMaxviewers()).to(\"maxviewers\")\n                        .bind(data.getFollowersperhour()).to(\"followersperhour\")\n                        .bind(data.getGamesplayed()).to(\"gamesplayed\")\n                        .bind(data.getViewsperhour()).to(\"viewsperhour\")\n                        .bind(data.getChanneldisplayname()).to(\"channeldisplayname\")\n                        .bind(data.getChannellogo()).to(\"channellogo\")\n                        .bind(data.getChannelurl()).to(\"channelurl\")\n                        .bind(data.getStartDateTime()).to(\"startDateTime\")\n                        .bind(data.getStreamUrl()).to(\"streamUrl\")\n                        .bind(data.getViewminutes()).to(\"viewminutes\")\n                        .run();\n\n                logResultSummaries(run);\n            }\n        }\n    }\n\n    @Async\n    public void persistSullyChannelGames(Set<ChannelGame> channelGames) {\n        for (ChannelGame game : channelGames) {\n            //todo at the moment its a hybrid node, but needs to be thought about more\n            for (ChannelGameDatum data : game.getData()) {\n                ResultSummary run = client.query(\"MERGE (g:ChannelGame{sully_id:$streamId})\\n\" + //todo need to fix this as there is no id\n                                \"            SET     s.stream_time = $streamtime,\\n\" +\n                                \"                    s.view_time = $viewtime,\\n\" +\n                                \"                    s.views_gained = $viewsgained,\\n\" +\n                                \"                    s.followers = $followers,\\n\" +\n                                \"                    s.avg_viewers = $avgviewers,\\n\" +\n                                \"                    s.max_viewers = $maxviewers,\\n\" +\n                                \"                    s.followers_per_hour = $followersperhour,\\n\" +\n                                \"                    s.games_played = $gamesplayed,\\n\" +\n                                \"                    s.views_per_hour = $viewsperhour;\")\n                        .bind(null).to(\"streamId\")//todo need to fix this or wont run\n                        .bind(data.getStreamtime()).to(\"streamtime\")\n                        .bind(data.getViewtime()).to(\"viewtime\")\n                        .bind(data.getViewsgained()).to(\"viewsgained\")\n                        .bind(data.getFollowers()).to(\"followers\")\n                        .bind(data.getAvgviewers()).to(\"avgviewers\")\n                        .bind(data.getMaxviewers()).to(\"maxviewers\")\n                        .bind(data.getFollowersperhour()).to(\"followersperhour\")\n                        .bind(data.getGamesplayed()).to(\"gamesplayed\")\n                        .bind(data.getViewsperhour()).to(\"viewsperhour\")\n                        .run();\n                logResultSummaries(run);\n            }\n        }\n\n    }\n\n    //todo becomes an intermediary node\n    @Async\n    public void persistSullyChannelRaidFinder(Set<ChannelRaidFinder> channelRaidFinders) {\n        for (ChannelRaidFinder channelRaidFinder : channelRaidFinders) {\n            for (ChannelRaidDatum data : channelRaidFinder.getData()) {\n                ResultSummary run = client.query(\"MERGE (r:RaidFinder{sully_id:$id})\\n\" +\n                                \"            SET     r.live_minutes = $liveMinutes,\\n\" +\n                                \"                    r.live_viewers = $liveViewers,\\n\" +\n                                \"                    r.overlapping_streams = $overlappingStreams,\\n\" +\n                                \"                    r.other_channel_streams = $otherChannelStreams,\\n\" +\n                                \"                    r.overlapping_ended_during = $overlappingEndedDuring,\\n\" +\n                                \"                    r.overlapping_ended_after = $overlappingEndedAfter,\\n\" +\n                                \"                    r.preview_large = $previewLarge,\\n\" +\n                                \"                    r.preview = $preview,\\n\" +\n                                \"                    r.current_game = $currentGame,\\n\" +\n                                \"                    r.avg_length_mins = $avgLengthMins,\\n\" +\n                                \"                    r.streams = $streams,\\n\" +\n                                \"                    r.view_minutes = $viewminutes,\\n\" +\n                                \"                    r.streamed_minutes = $streamedminutes,\\n\" +\n                                \"                    r.max_viewers = $maxviewers,\\n\" +\n                                \"                    r.avg_viewers = $avgviewers,\\n\" +\n                                \"                    r.followers = $followers,\\n\" +\n                                \"                    r.followers_gained = $followersgained,\\n\" +\n                                \"                    r.views_gained = $viewsgained,\\n\" +\n                                \"                    r.followers_gained_while_playing = $followersgainedwhileplaying,\\n\" +\n                                \"                    r.partner = $partner,\\n\" +\n                                \"                    r.affiliate = $affiliate,\\n\" +\n                                \"                    r.mature = $mature,\\n\" +\n                                \"                    r.language = $language,\\n\" +\n                                \"                    r.status = $status,\\n\" +\n                                \"                    r.games_played = $gamesPlayed,\\n\" +\n                                \"                    r.logo = $logo,\\n\" +\n                                \"                    r.twitch_url = $twitchurl,\\n\" +\n                                \"                    r.url = $url,\\n\" +\n                                \"                    r.display_name = $displayname;\")\n                        .bind(data.getId()).to(\"id\")\n                        .bind(data.getLiveMinutes()).to(\"liveMinutes\")\n                        .bind(data.getLiveViewers()).to(\"liveViewers\")\n                        .bind(data.getOverlappingStreams()).to(\"overlappingStreams\")\n                        .bind(data.getOtherChannelStreams()).to(\"otherChannelStreams\")\n                        .bind(data.getOverlappingEndedDuring()).to(\"overlappingEndedDuring\")\n                        .bind(data.getOverlappingEndedAfter()).to(\"overlappingEndedAfter\")\n                        .bind(data.getPreviewLarge()).to(\"previewLarge\")\n                        .bind(data.getPreview()).to(\"preview\")\n                        .bind(data.getCurrentGame()).to(\"currentGame\")\n                        .bind(data.getAvgLengthMins()).to(\"avgLengthMins\")\n                        .bind(data.getStreams()).to(\"streams\")\n                        .bind(data.getViewminutes()).to(\"viewminutes\")\n                        .bind(data.getStreamedminutes()).to(\"streamedminutes\")\n                        .bind(data.getMaxviewers()).to(\"maxviewers\")\n                        .bind(data.getAvgviewers()).to(\"avgviewers\")\n                        .bind(data.getFollowers()).to(\"followers\")\n                        .bind(data.getFollowersgained()).to(\"followersgained\")\n                        .bind(data.getViewsgained()).to(\"viewsgained\")\n                        .bind(data.getFollowersgainedwhileplaying()).to(\"followersgainedwhileplaying\")\n                        .bind(data.getPartner()).to(\"partner\")\n                        .bind(data.getAffiliate()).to(\"affiliate\")\n                        .bind(data.getMature()).to(\"mature\")\n                        .bind(data.getLanguage()).to(\"language\")\n                        .bind(data.getStatus()).to(\"status\")\n                        .bind(data.getGamesPlayed()).to(\"gamesPlayed\")\n                        .bind(data.getLogo()).to(\"logo\")\n                        .bind(data.getTwitchurl()).to(\"twitchurl\")\n                        .bind(data.getUrl()).to(\"url\")\n                        .bind(data.getDisplayname()).to(\"displayname\")\n                        .run();\n\n                logResultSummaries(run);\n            }\n        }\n    }\n\n    //todo becomes an intermediary node\n    @Async\n    public void persistSullyChannelGameFinder(Set<ChannelGamePicker> channelGamePickers) {\n\n        for (ChannelGamePicker picker : channelGamePickers) {\n            for (ChannelGamePickerDatum data : picker.getData()) {\n                ResultSummary run = client.query(\"MERGE (g:GameFinder{sully_id:$Id})\\n\" +\n                                \"            SET     g.average_viewers = $averageviewers,\\n\" +\n                                \"                    g.average_channels = $averagechannels,\\n\" +\n                                \"                    g.per_average_viewers = $peraverageviewers,\\n\" +\n                                \"                    g.per_average_channels = $peraveragechannels,\\n\" +\n                                \"                    g.per_recent_avg_viewers = $perrecentavgviewers,\\n\" +\n                                \"                    g.per_past_1_avg_viewers = $perpast1avgviewers,\\n\" +\n                                \"                    g.per_past_2_avg_viewers = $perpast2avgviewers,\\n\" +\n                                \"                    g.per_past3_avg_viewers = $perpast3avgviewers,\\n\" +\n                                \"                    g.per_recent_avg_channels = $perrecentavgchannels,\\n\" +\n                                \"                    g.per_past_1_avg_channels = $perpast1avgchannels,\\n\" +\n                                \"                    g.per_past_2_avg_channels = $perpast2avgchannels,\\n\" +\n                                \"                    g.per_past_3_avg_channels = $perpast3avgchannels,\\n\" +\n                                \"                    g.channels_above = $channelsabove,\\n\" +\n                                \"                    g.channels_same = $channelssame,\\n\" +\n                                \"                    g.channels_below = $channelsbelow,\\n\" +\n                                \"                    g.viewers_above = $viewersabove,\\n\" +\n                                \"                    g.viewers_same = $viewerssame,\\n\" +\n                                \"                    g.viewers_below = $viewersbelow,\\n\" +\n                                \"                    g.est_position = $estposition,\\n\" +\n                                \"                    g.viewer_ratio = $viewerratio,\\n\" +\n                                \"                    g.viewer_ratio_same_blow = $viewerratiosameblow,\\n\" +\n                                \"                    g.game_trend_channels_recent = $gametrendchannelsrecent,\\n\" +\n                                \"                    g.game_trend_channels_3_day = $gametrendchannels3day,\\n\" +\n                                \"                    g.game_trend_viewers_recent = $gametrendviewersrecent,\\n\" +\n                                \"                    g.game_trend_viewers_3_day = $gametrendviewers3day,\\n\" +\n                                \"                    g.twitch_game_trend_channels_recent = $twitchgametrendchannelsrecent,\\n\" +\n                                \"                    g.twitch_game_trend_channels_3_day = $twitchgametrendchannels3day,\\n\" +\n                                \"                    g.twitch_game_trend_viewers_recent = $twitchgametrendviewersrecent,\\n\" +\n                                \"                    g.twitch_game_trend_viewers_3_day = $twitchgametrendviewers3day,\\n\" +\n                                \"                    g.name = $name,\\n\" +\n                                \"                    g.logo = $logo,\\n\" +\n                                \"                    g.url = $url;\")\n                        .bind(data.getId()).to(\"Id\")\n                        .bind(data.getAverageviewers()).to(\"averageviewers\")\n                        .bind(data.getAveragechannels()).to(\"averagechannels\")\n                        .bind(data.getPeraverageviewers()).to(\"peraverageviewers\")\n                        .bind(data.getPeraveragechannels()).to(\"peraveragechannels\")\n                        .bind(data.getPeraverageviewers()).to(\"perrecentavgviewers\")\n                        .bind(data.getPerpast1avgviewers()).to(\"perpast1avgviewers\")\n                        .bind(data.getPerpast2avgviewers()).to(\"perpast2avgviewers\")\n                        .bind(data.getPerpast3avgviewers()).to(\"perpast3avgviewers\")\n                        .bind(data.getPerrecentavgchannels()).to(\"perrecentavgchannels\")\n                        .bind(data.getPerpast1avgchannels()).to(\"perpast1avgchannels\")\n                        .bind(data.getPerpast2avgchannels()).to(\"perpast2avgchannels\")\n                        .bind(data.getPerpast3avgchannels()).to(\"perpast3avgchannels\")\n                        .bind(data.getChannelsabove()).to(\"channelsabove\")\n                        .bind(data.getChannelssame()).to(\"channelssame\")\n                        .bind(data.getChannelsbelow()).to(\"channelsbelow\")\n                        .bind(data.getViewersabove()).to(\"viewersabove\")\n                        .bind(data.getViewerssame()).to(\"viewerssame\")\n                        .bind(data.getViewersbelow()).to(\"viewersbelow\")\n                        .bind(data.getEstposition()).to(\"estposition\")\n                        .bind(data.getViewerratio()).to(\"viewerratio\")\n                        .bind(data.getViewerratiosameblow()).to(\"viewerratiosameblow\")\n                        .bind(data.getGametrendchannelsrecent()).to(\"gametrendchannelsrecent\")\n                        .bind(data.getGametrendchannels3day()).to(\"gametrendchannels3day\")\n                        .bind(data.getGametrendviewersrecent()).to(\"gametrendviewersrecent\")\n                        .bind(data.getGametrendviewers3day()).to(\"gametrendviewers3day\")\n                        .bind(data.getTwitchgametrendchannelsrecent()).to(\"twitchgametrendchannelsrecent\")\n                        .bind(data.getTwitchgametrendchannels3day()).to(\"twitchgametrendchannels3day\")\n                        .bind(data.getTwitchgametrendviewersrecent()).to(\"twitchgametrendviewersrecent\")\n                        .bind(data.getTwitchgametrendviewers3day()).to(\"twitchgametrendviewers3day\")\n                        .bind(data.getName()).to(\"name\")\n                        .bind(data.getLogo()).to(\"logo\")\n                        .bind(data.getUrl()).to(\"url\")\n                        .run();\n\n                logResultSummaries(run);\n            }\n        }\n\n    }\n\n    @Async\n    public void persistTwitchStreamTag(LinkedHashMap jsonMap) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        ResultSummary run = client.query(\n                        \"UNWIND $json.data as tag \" +\n                                \"MERGE (s:StreamTag{twitch_id:tag.tag_id})\\n\" +\n                                \"            SET     s.is_auto = tag.is_auto\")\n                .bind(jsonMap).to(\"json\")\n                .run();\n        logResultSummaries(run);\n        stopWatch.stop();\n        log.debug(\"Persisting Twitch Stream Tags took: \" + stopWatch.getLastTaskTimeMillis() / 1000 + \" seconds\");\n    }\n\n    public void updateGameWithTwitchId(Map json) {\n        ResultSummary run = client.query(\"UNWIND $json.data as game \" +\n                \"MATCH (g:Game) WHERE g.name = game.name SET g.twitch_id = game.id;\").bind(json).to(\"json\").run();\n        logResultSummaries(run);\n    }\n\n//    @Async\n//    public void persistTwitchChatters(Set<ChatterListDTO> chatterListDTOS){\n//        for(ChatterListDTO data: chatterListDTOS){\n//            ResultSummary run = client.query(\"MERGE (t:TeamsSummary\"  + table.getDays() +\"Days{day_range:$dayRange})\\n\" +\n//                            \"            SET     t.records_total = $recordsTotal,\\n\" +\n//                            \"                    t.watch_time = $watchtime,\\n\" +\n//                            \"                    t.max_viewers = $maxviewers,\\n\" +\n//                            \"                    t.avg_viewers = $avgviewers,\\n\" +\n//                            \"                    t.stream_time = $streamtime,\\n\" +\n//                            \"                    t.members = $members,\\n\" +\n//                            \"                    t.max_channels = $maxchannels,\\n\" +\n//                            \"                    t.avg_channels = $avgchannels;\")\n//                    .bind(table.getDays()).to(\"dayRange\")\n//                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n//                    .bind(table.getProgressMap().get(\"watchtime\")).to(\"watchtime\")\n//                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n//                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n//                    .bind(table.getProgressMap().get(\"streamtime\")).to(\"streamtime\")\n//                    .bind(table.getProgressMap().get(\"members\")).to(\"members\")\n//                    .bind(table.getProgressMap().get(\"maxchannels\")).to(\"maxchannels\")\n//                    .bind(table.getProgressMap().get(\"avgchannels\")).to(\"avgchannels\")\n//                    .run();\n//            logResultSumamries(run);\n//        }\n//\n//    }\n//\n//    @Async\n//    public void persistTwitchFollowersFrom(Set<FollowList> followListsFrom){\n//        for(FollowList data: followListsFrom){\n//            ResultSummary run = client.query(\"MERGE (t:TeamsSummary\"  + table.getDays() +\"Days{day_range:$dayRange})\\n\" +\n//                            \"            SET     t.records_total = $recordsTotal,\\n\" +\n//                            \"                    t.watch_time = $watchtime,\\n\" +\n//                            \"                    t.max_viewers = $maxviewers,\\n\" +\n//                            \"                    t.avg_viewers = $avgviewers,\\n\" +\n//                            \"                    t.stream_time = $streamtime,\\n\" +\n//                            \"                    t.members = $members,\\n\" +\n//                            \"                    t.max_channels = $maxchannels,\\n\" +\n//                            \"                    t.avg_channels = $avgchannels;\")\n//                    .bind(table.getDays()).to(\"dayRange\")\n//                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n//                    .bind(table.getProgressMap().get(\"watchtime\")).to(\"watchtime\")\n//                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n//                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n//                    .bind(table.getProgressMap().get(\"streamtime\")).to(\"streamtime\")\n//                    .bind(table.getProgressMap().get(\"members\")).to(\"members\")\n//                    .bind(table.getProgressMap().get(\"maxchannels\")).to(\"maxchannels\")\n//                    .bind(table.getProgressMap().get(\"avgchannels\")).to(\"avgchannels\")\n//                    .run();\n//            logResultSumamries(run);\n//        }\n//\n//    }\n//\n//    @Async\n//    public void persistTwitchFollowersTo(Set<FollowList> followListsTo){\n//        for(FollowList data: followListsTo){\n//            ResultSummary run = client.query(\"MERGE (t:TeamsSummary\"  + table.getDays() +\"Days{day_range:$dayRange})\\n\" +\n//                            \"            SET     t.records_total = $recordsTotal,\\n\" +\n//                            \"                    t.watch_time = $watchtime,\\n\" +\n//                            \"                    t.max_viewers = $maxviewers,\\n\" +\n//                            \"                    t.avg_viewers = $avgviewers,\\n\" +\n//                            \"                    t.stream_time = $streamtime,\\n\" +\n//                            \"                    t.members = $members,\\n\" +\n//                            \"                    t.max_channels = $maxchannels,\\n\" +\n//                            \"                    t.avg_channels = $avgchannels;\")\n//                    .bind(table.getDays()).to(\"dayRange\")\n//                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n//                    .bind(table.getProgressMap().get(\"watchtime\")).to(\"watchtime\")\n//                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n//                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n//                    .bind(table.getProgressMap().get(\"streamtime\")).to(\"streamtime\")\n//                    .bind(table.getProgressMap().get(\"members\")).to(\"members\")\n//                    .bind(table.getProgressMap().get(\"maxchannels\")).to(\"maxchannels\")\n//                    .bind(table.getProgressMap().get(\"avgchannels\")).to(\"avgchannels\")\n//                    .run();\n//            logResultSumamries(run);\n//        }\n//    }\n\n//    @Async\n//    public void persistTwitchUser(Set<User> users){\n//        for(User data: users){\n//            ResultSummary run = client.query(\"MERGE (t:TeamsSummaryDays{day_range:$dayRange})\\n\" +\n//                            \"            SET     t.records_total = $recordsTotal,\\n\" +\n//                            \"                    t.watch_time = $watchtime,\\n\" +\n//                            \"                    t.max_viewers = $maxviewers,\\n\" +\n//                            \"                    t.avg_viewers = $avgviewers,\\n\" +\n//                            \"                    t.stream_time = $streamtime,\\n\" +\n//                            \"                    t.members = $members,\\n\" +\n//                            \"                    t.max_channels = $maxchannels,\\n\" +\n//                            \"                    t.avg_channels = $avgchannels;\")\n//                    .bind(table.getDays()).to(\"dayRange\")\n//                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n//                    .bind(table.getProgressMap().get(\"watchtime\")).to(\"watchtime\")\n//                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n//                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n//                    .bind(table.getProgressMap().get(\"streamtime\")).to(\"streamtime\")\n//                    .bind(table.getProgressMap().get(\"members\")).to(\"members\")\n//                    .bind(table.getProgressMap().get(\"maxchannels\")).to(\"maxchannels\")\n//                    .bind(table.getProgressMap().get(\"avgchannels\")).to(\"avgchannels\")\n//                    .run();\n//            logResultSumamries(run);\n//        }\n//\n//    }\n//\n//    @Async\n//    public void persistTwitchChannelTeam(Set<TeamMember> teamMembers){\n//        for(TeamMember data: teamMembers){\n//\n//        }\n//\n//    }\n//\n//    @Async\n//    public void persistTwitchGame(Set<Game> games){\n//        for(Game data: games){\n//            ResultSummary run = client.query(\"MERGE (t:TeamsSummary\"  + table.getDays() +\"Days{day_range:$dayRange})\\n\" +\n//                            \"            SET     t.records_total = $recordsTotal,\\n\" +\n//                            \"                    t.watch_time = $watchtime,\\n\" +\n//                            \"                    t.max_viewers = $maxviewers,\\n\" +\n//                            \"                    t.avg_viewers = $avgviewers,\\n\" +\n//                            \"                    t.stream_time = $streamtime,\\n\" +\n//                            \"                    t.members = $members,\\n\" +\n//                            \"                    t.max_channels = $maxchannels,\\n\" +\n//                            \"                    t.avg_channels = $avgchannels;\")\n//                    .bind(table.getDays()).to(\"dayRange\")\n//                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n//                    .bind(table.getProgressMap().get(\"watchtime\")).to(\"watchtime\")\n//                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n//                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n//                    .bind(table.getProgressMap().get(\"streamtime\")).to(\"streamtime\")\n//                    .bind(table.getProgressMap().get(\"members\")).to(\"members\")\n//                    .bind(table.getProgressMap().get(\"maxchannels\")).to(\"maxchannels\")\n//                    .bind(table.getProgressMap().get(\"avgchannels\")).to(\"avgchannels\")\n//                    .run();\n//            logResultSumamries(run);\n//        }\n//\n//    }\n//\n//    @Async\n//    public void persistTwitchStreams(Set<StreamListDTO> streamListDTOS){\n//        for(StreamListDTO data: streamListDTOS){\n//            ResultSummary run = client.query(\"MERGE (t:TeamsSummary\"  + table.getDays() +\"Days{day_range:$dayRange})\\n\" +\n//                            \"            SET     t.records_total = $recordsTotal,\\n\" +\n//                            \"                    t.watch_time = $watchtime,\\n\" +\n//                            \"                    t.max_viewers = $maxviewers,\\n\" +\n//                            \"                    t.avg_viewers = $avgviewers,\\n\" +\n//                            \"                    t.stream_time = $streamtime,\\n\" +\n//                            \"                    t.members = $members,\\n\" +\n//                            \"                    t.max_channels = $maxchannels,\\n\" +\n//                            \"                    t.avg_channels = $avgchannels;\")\n//                    .bind(table.getDays()).to(\"dayRange\")\n//                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n//                    .bind(table.getProgressMap().get(\"watchtime\")).to(\"watchtime\")\n//                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n//                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n//                    .bind(table.getProgressMap().get(\"streamtime\")).to(\"streamtime\")\n//                    .bind(table.getProgressMap().get(\"members\")).to(\"members\")\n//                    .bind(table.getProgressMap().get(\"maxchannels\")).to(\"maxchannels\")\n//                    .bind(table.getProgressMap().get(\"avgchannels\")).to(\"avgchannels\")\n//                    .run();\n//            logResultSumamries(run);\n//        }\n//    }\n//\n//    //this will eventually become the list that we use to do our first business development\n//    @Async\n//    public void persistTwitchChannelSchedule(Set<StreamSchedule> streamSchedules){\n//        for(StreamSchedule data: streamSchedules){\n//            ResultSummary run = client.query(\"MERGE (t:TeamsSummary\"  + table.getDays() +\"Days{day_range:$dayRange})\\n\" +\n//                            \"            SET     t.records_total = $recordsTotal,\\n\" +\n//                            \"                    t.watch_time = $watchtime,\\n\" +\n//                            \"                    t.max_viewers = $maxviewers,\\n\" +\n//                            \"                    t.avg_viewers = $avgviewers,\\n\" +\n//                            \"                    t.stream_time = $streamtime,\\n\" +\n//                            \"                    t.members = $members,\\n\" +\n//                            \"                    t.max_channels = $maxchannels,\\n\" +\n//                            \"                    t.avg_channels = $avgchannels;\")\n//                    .bind(table.getDays()).to(\"dayRange\")\n//                    .bind(table.getRecordsTotal()).to(\"recordsTotal\")\n//                    .bind(table.getProgressMap().get(\"watchtime\")).to(\"watchtime\")\n//                    .bind(table.getProgressMap().get(\"maxviewers\")).to(\"maxviewers\")\n//                    .bind(table.getProgressMap().get(\"avgviewers\")).to(\"avgviewers\")\n//                    .bind(table.getProgressMap().get(\"streamtime\")).to(\"streamtime\")\n//                    .bind(table.getProgressMap().get(\"members\")).to(\"members\")\n//                    .bind(table.getProgressMap().get(\"maxchannels\")).to(\"maxchannels\")\n//                    .bind(table.getProgressMap().get(\"avgchannels\")).to(\"avgchannels\")\n//                    .run();\n//            logResultSumamries(run);\n//        }\n//    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/twitchsnitch/importer/service/PersistenceService.java b/src/main/java/com/twitchsnitch/importer/service/PersistenceService.java
--- a/src/main/java/com/twitchsnitch/importer/service/PersistenceService.java	(revision 76a30db1e5d1231f6e6a06439660cc03b300841e)
+++ b/src/main/java/com/twitchsnitch/importer/service/PersistenceService.java	(date 1649367617481)
@@ -407,7 +407,7 @@
                                 "                    g.previous_avg_ratio = $previousavgratio,\n" +
                                 "                    g.previous_vphs = $previousvphs,\n" +
                                 "                    g.fphs = $fphs,\n" +
-                                "                    g.vphs = $vphs,\n" +);
+                                "                    g.vphs = $vphs;")
                         .bind(jsonMap).to("json")
                         .run();
                 logResultSummaries(run);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"44bf6563-bd17-4b0c-be69-18fb994e37e6\" name=\"Changes\" comment=\"kinda working, nice :)\">\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelGame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelGame.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelGamePicker.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelGamePicker.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelRaidFinder.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelRaidFinder.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelStream.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelStream.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelsTable.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelsTable.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/games/GamesTable.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/games/GamesTable.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/teams/TeamsTable.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/teams/TeamsTable.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/ChatterListDTO.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/ChatterListDTO.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/GameListDTO.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/GameListDTO.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/StreamListDTO.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/StreamListDTO.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/StreamTagListDTO.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/StreamTagListDTO.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/PersistenceService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/PersistenceService.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/TestingService.java\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/TwitchDataService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/TwitchDataService.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/web/ImportDataResource.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/web/ImportDataResource.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/application.properties\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"CompilerWorkspaceConfiguration\">\n    <option name=\"MAKE_PROJECT_ON_SAVE\" value=\"true\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"MavenImportPreferences\">\n    <option name=\"generalSettings\">\n      <MavenGeneralSettings>\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\n        <option name=\"useMavenConfig\" value=\"true\" />\n      </MavenGeneralSettings>\n    </option>\n  </component>\n  <component name=\"ProjectId\" id=\"27G1CtFBZ1NWhole5iCiklhp3eB\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/src/main/resources\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"project.propCompiler\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/main/resources\" />\n      <recent name=\"$PROJECT_DIR$/src/main/resources/config\" />\n    </key>\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\n      <recent name=\"com.twitchsnitch.importer.service\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"ImporterApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.twitchsnitch.importer.ImporterApplication\" />\n      <module name=\"importer\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"com.twitchsnitch.importer.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.ImporterApplication\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"44bf6563-bd17-4b0c-be69-18fb994e37e6\" name=\"Changes\" comment=\"\" />\n      <created>1648931531064</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1648931531064</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"kinda working, nice :)\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"kinda working, nice :)\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/SchedulingService.java</url>\n          <line>14</line>\n          <option name=\"timeStamp\" value=\"7\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/TwitchDataService.java</url>\n          <line>393</line>\n          <option name=\"timeStamp\" value=\"34\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 76a30db1e5d1231f6e6a06439660cc03b300841e)
+++ b/.idea/workspace.xml	(date 1649367609318)
@@ -5,22 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="44bf6563-bd17-4b0c-be69-18fb994e37e6" name="Changes" comment="kinda working, nice :)">
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelGame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelGame.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelGamePicker.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelGamePicker.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelRaidFinder.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelRaidFinder.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelStream.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelStream.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelsTable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/channels/ChannelsTable.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/games/GamesTable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/games/GamesTable.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/teams/TeamsTable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/sully/teams/TeamsTable.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/ChatterListDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/ChatterListDTO.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/GameListDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/GameListDTO.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/StreamListDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/StreamListDTO.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/StreamTagListDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/dto/twitch/StreamTagListDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/PersistenceService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/PersistenceService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/TestingService.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/TwitchDataService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/service/TwitchDataService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/web/ImportDataResource.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/twitchsnitch/importer/web/ImportDataResource.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/application.properties" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
